#!/usr/bin/env python

import argparse
import re
import subprocess
import datetime
import os

myLustreDirectory = "/lustre/scratch109/ensembl/dz1/"

def parseArguments():
	parser = argparse.ArgumentParser(description="A convenience function to write out Sanger Farm LSF commands")
	parser.add_argument("--dir", "-d", metavar="DIR", dest = "output_dir", type=str, default=myLustreDirectory, help="Directory where output files are dumped")
	parser.add_argument("--mem", "-m", dest = "mem", type=int, default = 2, help="Required memory (GB)")
	parser.add_argument("--queue", "-q", dest = "queue", default = "normal", type=str, help="LSF queue")
	parser.add_argument("--name", "-n", dest = "name", type=str, help="Name of job or job array (default: automatic generation)")
	parser.add_argument("--interactive", "-I", dest = "interactive", action='store_true', help="Interactive session")
	parser.add_argument("--arraySize", "-a", metavar="ARRAY_SIZE", dest = "array", type=int, help="Size of job array")
	parser.add_argument("--test", "-t", dest = "test", action='store_true', help="Print LSF command only, do no execute")
	parser.add_argument("cmd", metavar="command", type=str, help="Command")

	return parser.parse_args()

def defaultName(cmd):
	now = datetime.datetime.now()

	parts = cmd.split()
	if parts[0] == 'perl' or parts[0] == 'python':
	    name = parts[1]
	else:
	    name = parts[0]

	return "_".join(map(str, [now.date(), now.time(), name]))

def formulateCommand(args):
	if args.name is None:
		args.name = defaultName(args.cmd)

# Add in Java VM memory requirement:
	args.cmd = re.sub('\<java\>', 'java -Xmx %i' % (args.mem * 1024), args.cmd)

# default options
	bsub_cmd = 'bsub -q %s -R"select[mem>%i000] rusage[mem=%i000]" -M%i000000' % (args.queue, args.mem, args.mem, args.mem)

# output options
	if args.interactive: 
	    output = "-Is -J " + name
	elif args.array is not None and args.array > 1: 
	    output = "-o %s/%s.\%I.out -e %s/%s.\%I.err -J'%s[1-%i]'" % (args.output_dir, args.name, args.output_dir, args.name, args.name, args.array)
	else:
	    output = "-o %s/%s.out -e %s/%s.err -J %s" % (args.output_dir, args.name, args.output_dir, args.name, args.name)

	return " ".join([bsub_cmd, output, 'LSFwrapper.sh', "'", args.cmd, "'"])

def main():
	args = parseArguments
	command = formulateCommand(parseArguments())
	print command
	if not args.test:
		subprocess.call(formulateCommand(args).split(' '))

if __name__ == "__main__":
	main()
